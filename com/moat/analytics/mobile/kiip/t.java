package com.moat.analytics.mobile.kiip;

import android.os.Handler;
import android.os.Looper;
import com.moat.analytics.mobile.kiip.base.functional.Optional;
import java.util.Iterator;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;































final class t
{
  static enum c
  {
    static { new int[] { 1 }[1] = 2; }
    public static final int ˊ = 1;
    public static final int ॱ = 2;
  }
  







  private long ˊॱ = 1800000L;
  private long ʼ = 60000L;
  


  private static t ʽ;
  

  private static final Queue<b> ʻ = new ConcurrentLinkedQueue();
  
  private Handler ᐝ;
  volatile int ˋ = c.ˊ;
  volatile boolean ˎ = false;
  volatile boolean ˏ = false;
  volatile int ॱ = 200;
  volatile int ˊ = 10;
  
  private final AtomicBoolean ॱˊ = new AtomicBoolean(false);
  private volatile long ॱˋ = 0L;
  private final AtomicInteger ˋॱ = new AtomicInteger(0);
  private final AtomicBoolean ˏॱ = new AtomicBoolean(false);
  
  static synchronized t ˋ()
  {
    if (ʽ == null) {
      ʽ = new t();
    }
    return ʽ;
  }
  


  private t()
  {
    try
    {
      ᐝ = new Handler(Looper.getMainLooper()); return;
    }
    catch (Exception localException) {
      o.ॱ(
        localException;
    }
  }
  
  final void ˏ() {
    if (System.currentTimeMillis() - ॱˋ > ˊॱ) {
      ˋ(0L);
    }
  }
  
  private void ˋ(final long paramLong) {
    if (!ˏॱ.compareAndSet(false, true)) {
      return;
    }
    b.ˏ(3, "OnOff", this, "Performing status check.");
    
    new Thread() {
      public final void run() {
        Looper.prepare();
        Handler localHandler = new Handler();
        
        t.d localD = new t.d(t.this, "KIIP", localHandler, new t.e()
        {
          public final void ˋ(i paramAnonymous2I) throws o
          {
            synchronized () {
              boolean bool = getInstanceॱ;
              if ((ˋ != paramAnonymous2I.ˏ()) || ((ˋ == t.c.ˊ) && (bool))) {
                ˋ = paramAnonymous2I.ˏ();
                if ((ˋ == t.c.ˊ) && (bool)) {
                  ˋ = t.c.ॱ;
                }
                if (ˋ == t.c.ॱ) {
                  b.ˏ(3, "OnOff", this, "Moat enabled - Version 2.4.0");
                }
                for (t.b localB : t.ॱ()) {
                  if (ˋ == t.c.ॱ) {
                    ˋ.ॱ();
                  }
                }
              }
              

              while (!t.ॱ().isEmpty()) {
                t.ॱ().remove();
              }
              return; } } }, (byte)0);
        

        localHandler.postDelayed(localD, paramLong);
        Looper.loop();
      }
    }.start();
  }
  










  private static void ˊ()
  {
    synchronized (ʻ) {
      long l = System.currentTimeMillis();
      for (Iterator localIterator = ʻ.iterator(); localIterator.hasNext();) {
        b localB = (b)localIterator.next();
        if (l - ॱ.longValue() >= 60000L) {
          localIterator.remove();
        }
      }
      if (ʻ.size() >= 15) {
        for (int i = 0; i < 5; i++) {
          ʻ.remove();
        }
      }
      return;
    }
  }
  





  class d
    implements Runnable
  {
    private final Handler ˋ;
    




    private final String ˏ;
    




    private final t.5.2 ˎ;
    





    private d(String paramString, Handler paramHandler, t.5.2 param2)
    {
      ˎ = param2;
      ˋ = paramHandler;
      ˏ = ("https://z.moatads.com/" + paramString + "/android/" + "2bc3418b93f01686fcbd1ebebcc04694651821b2".substring(0, 7) + "/status.json");
    }
    


























































































































































































































































































































































































































































































































    public final void run()
    {
      Object localObject;
      
























































































































































































































































































































































































































































































































      try
      {
        localObject = this;String str = ॱ();
        final i localI = new i(str);
        ॱ.ˎ = localI.ˊ();
        ॱ.ˏ = localI.ˎ();
        ॱ.ॱ = localI.ˋ();
        ॱ.ˊ = localI.ॱ();
        
        Looper localLooper = Looper.getMainLooper();
        new Handler(localLooper)
          .post(new Runnable()
          {
            public final void run()
            {
              try
              {
                t.d.ˋ(t.d.this).ˋ(localI); return;
              } catch (Exception localException) {
                o.ॱ(
                  localException;













































































































































































































































































































































              }
              












































































































































































































































































































































            }
            













































































































































































































































































































































          });
        t.ॱ(ॱ, System.currentTimeMillis());
        t.ˋ(ॱ).compareAndSet(true, false);
        

        if (str == null) {
          if (t.ˏ(ॱ).incrementAndGet() < 10) {
            t.ˊ(ॱ, t.ॱ(ॱ));
            break label164;
          }
        } else t.ˏ(ॱ).set(0);
      }
      catch (Exception localException)
      {
        o.ॱ(
          localException; }
      label164:
      ˋ.removeCallbacks(this);
      
      if ((localObject = Looper.myLooper()) != null) {
        ((Looper)localObject).quit();
      }
    }
    





































    private String ॱ()
    {
      Object localObject = l.ॱ(ˏ + "?ts=" + System.currentTimeMillis() + "&v=2.4.0");
      



      try
      {
        localObject = (String)((Optional)localObject).get();
      } catch (Exception localException) {
        localObject = null;
      }
      return localObject;
    }
  }
  
  class b
  {
    final Long ॱ;
    final t.a ˋ;
    
    b(Long paramLong, t.a paramA)
    {
      ॱ = paramLong;
      ˋ = paramA;
    }
  }
  
  final void ॱ(a paramA)
    throws o
  {
    if (ˋ == c.ॱ) {
      paramA.ॱ();return;
    }
    ˊ();
    ʻ.add(new b(Long.valueOf(System.currentTimeMillis()), paramA));
    





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    paramA = this; if (ॱˊ.compareAndSet(false, true))
    {

      Runnable local2 = new Runnable()
      {
        public final void run()
        {
          try
          {
            if (t.ॱ().size() > 0) {
              t.ˎ();
              t.ˎ(t.this).postDelayed(this, 60000L);return;
            }
            t.ˊ(t.this).compareAndSet(true, false);
            t.ˎ(t.this).removeCallbacks(this); return;
          }
          catch (Exception localException) {
            o.ॱ(
              localException;












































































































































































































































































































































          }
          












































































































































































































































































































































        }
        













































































































































































































































































































































      };
      ᐝ.postDelayed(local2, 60000L);
    }
  }
  
  static abstract interface e
  {
    public abstract void ˋ(i paramI)
      throws o;
  }
  
  static abstract interface a
  {
    public abstract void ॱ()
      throws o;
  }
}
