package com.moat.analytics.mobile.kiip;

import android.os.Handler;
import android.support.annotation.CallSuper;
import android.view.View;
import java.util.Map;
import org.json.JSONObject;



abstract class g
  extends d
{
  private int ॱˊ;
  private int ͺ;
  private double ˏॱ;
  private int ˋॱ;
  private int ॱˋ;
  private int ॱˎ;
  
  static enum a
  {
    static { new int[] { 1, 2, 3, 4 }[4] = 5; }
    public static final int ˏ = 5; public static final int ˋ = 4; public static final int ˊ = 3; public static final int ॱ = 2; public static final int ˎ = 1;
  }
  















  g(String paramString)
  {
    super(paramString);
    ˋॱ = Integer.MIN_VALUE;
    ॱˋ = Integer.MIN_VALUE;
    ͺ = Integer.MIN_VALUE;
    ॱˎ = 0;
    ॱˊ = a.ˎ;
    ˏॱ = NaN.0D;
  }
  

  abstract boolean ॱˊ();
  

  public final boolean ˋ(Map<String, String> paramMap, View paramView)
  {
    try
    {
      if ((paramMap = super.ˋ(paramMap, paramView)))
      {
        paramView = this;
        


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        Runnable local1 = new Runnable()
        {
          public final void run()
          {
            try
            {
              if ((ॱˊ()) && (!ͺ()))
              {
                if (Boolean.valueOf(ʼॱ()).booleanValue()) {
                  ˊॱ.postDelayed(this, 200L);return;
                }
                ॱˋ();
                
                return; }
              ॱˋ(); return;
            }
            catch (Exception localException) {
              ॱˋ();
              o.ॱ(localException);













































































































































































































































































































































            }
            












































































































































































































































































































































          }
          













































































































































































































































































































































        };
        ˊॱ.postDelayed(local1, 200L);
      }
    }
    catch (Exception paramMap)
    {
      b.ˏ(3, "IntervalVideoTracker", this, "Problem with video loop");
      ॱ("trackVideoAd", paramMap);
      paramMap = 0;
    }
    return paramMap;
  }
  
  public void stopTracking()
  {
    try {
      dispatchEvent(new MoatAdEvent(MoatAdEventType.AD_EVT_COMPLETE));
      super.stopTracking(); return;
    } catch (Exception localException) {
      o.ॱ(
        localException;
    }
  }
  

  public void setPlayerVolume(Double paramDouble)
  {
    super.setPlayerVolume(paramDouble);
    ˏॱ = ᐝ().doubleValue();
  }
  
  final JSONObject ˋ(MoatAdEvent paramMoatAdEvent)
  {
    Integer localInteger;
    if (!ˊ.equals(MoatAdEvent.ˏ)) {
      localInteger = ˊ;
    } else {
      try {
        localInteger = ˋॱ();
      } catch (Exception localException) {
        localInteger = Integer.valueOf(ͺ);
      }
      ˊ = localInteger;
    }
    
    if ((ˊ.intValue() < 0) || (
      (ˊ.intValue() == 0) && (ॱ == MoatAdEventType.AD_EVT_COMPLETE) && (ͺ > 0)))
    {

      localInteger = Integer.valueOf(ͺ);
      ˊ = localInteger;
    }
    
    if (ॱ == MoatAdEventType.AD_EVT_COMPLETE)
    {


      if ((localInteger.intValue() == Integer.MIN_VALUE) || (ॱˋ == Integer.MIN_VALUE) || 
      
        (!ˋ(localInteger, Integer.valueOf(ॱˋ)))) {
        ॱˊ = a.ˋ;
        ॱ = MoatAdEventType.AD_EVT_STOPPED;
      } else {
        ॱˊ = a.ˏ;
      }
    }
    
    return super.ˋ(paramMoatAdEvent);
  }
  








  abstract Integer ˋॱ();
  








  abstract boolean ॱˎ();
  







  abstract Integer ʻॱ();
  







  @CallSuper
  final boolean ʼॱ()
    throws o
  {
    if ((!ॱˊ()) || (ͺ())) {
      return false;
    }
    try
    {
      int i = ˋॱ().intValue();
      
      if ((ͺ >= 0) && (i < 0)) {
        return false;
      }
      
      ͺ = i;
      

      if (i == 0) {
        return true;
      }
      
      int j = ʻॱ().intValue();
      boolean bool = ॱˎ();
      double d1 = j / 4.0D;
      
      double d2 = ᐝ().doubleValue();
      
      MoatAdEventType localMoatAdEventType2 = null;
      
      if (i > ˋॱ) {
        ˋॱ = i;
      }
      
      if (ॱˋ == Integer.MIN_VALUE) {
        ॱˋ = j;
      }
      
      if (bool) {
        if (ॱˊ == a.ˎ) {
          localMoatAdEventType2 = MoatAdEventType.AD_EVT_START;
          ॱˊ = a.ˊ;
        } else if (ॱˊ == a.ॱ) {
          localMoatAdEventType2 = MoatAdEventType.AD_EVT_PLAYING;
          ॱˊ = a.ˊ;

        }
        else if (((j = (int)Math.floor(i / d1) - 1) >= 0) && (j < 3)) {
          MoatAdEventType localMoatAdEventType1 = ʽ[j];
          if (!ʻ.containsKey(localMoatAdEventType1)) {
            localMoatAdEventType2 = localMoatAdEventType1;
            ʻ.put(localMoatAdEventType1, Integer.valueOf(1));
          }
          
        }
      }
      else if (ॱˊ != a.ॱ) {
        localMoatAdEventType2 = MoatAdEventType.AD_EVT_PAUSED;
        ॱˊ = a.ॱ;
      }
      

      int k;
      
      if (((k = localMoatAdEventType2 != null ? 1 : 0) == 0) && (!Double.isNaN(ˏॱ)) && (Math.abs(ˏॱ - d2) > 0.05D)) {
        localMoatAdEventType2 = MoatAdEventType.AD_EVT_VOLUME_CHANGE;
        k = 1;
      }
      
      if (k != 0) {
        dispatchEvent(new MoatAdEvent(localMoatAdEventType2, Integer.valueOf(i), ˏॱ()));
      }
      
      ˏॱ = d2;
      ॱˎ = 0;
      
      return true;

    }
    catch (Exception localException)
    {
      if (ॱˎ++ < 5) return true; } return false;
  }
}
