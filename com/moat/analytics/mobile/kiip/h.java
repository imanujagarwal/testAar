package com.moat.analytics.mobile.kiip;

import android.content.Context;
import android.content.Intent;
import android.support.v4.content.LocalBroadcastManager;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

















final class h
{
  private static final h ˎ = new h();
  
  private final Map<f, String> ˋ;
  private final Map<c, String> ॱ;
  private final ScheduledExecutorService ˊ;
  private ScheduledFuture<?> ˏ;
  private ScheduledFuture<?> ʽ;
  
  static h ˋ()
  {
    return ˎ;
  }
  
  private h() {
    ˊ = Executors.newScheduledThreadPool(1);
    ˋ = new WeakHashMap();
    ॱ = new WeakHashMap();
  }
  






  final void ˎ(f paramF)
  {
    if (paramF != null) {
      b.ˏ(3, "JSUpdateLooper", this, "removeSetupNeededBridge" + paramF.hashCode());
      
      ˋ.remove(paramF);
    }
  }
  












  final void ॱ(c paramC)
  {
    if (paramC != null) {
      b.ˏ(3, "JSUpdateLooper", this, "removeActiveTracker" + paramC.hashCode());
      
      ॱ.remove(paramC);
    }
  }
  
  final void ˎ(Context paramContext, final f paramF)
  {
    if (paramF != null) {
      ˋ.put(paramF, "");
      paramF = paramContext;
      









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































      paramContext = this; if ((ʽ == null) || (ʽ.isDone())) {
        b.ˏ(3, "JSUpdateLooper", paramContext, "Starting metadata reporting loop");
        paramF = new Runnable()
        {
          public final void run()
          {
            try
            {
              Intent localIntent = new Intent("UPDATE_METADATA");
              LocalBroadcastManager.getInstance(paramF.getApplicationContext()).sendBroadcast(localIntent);
              if (h.ॱ(h.this).isEmpty()) {
                h.ˎ(h.this).cancel(true);
              }
              return;
            } catch (Exception localException) {
              o.ॱ(
                localException;













































































































































































































































































































































            }
            












































































































































































































































































































































          }
          













































































































































































































































































































































        }; Context tmp60_59 = paramContext;6059ʽ = 6059ˊ.scheduleWithFixedDelay(paramF, 0L, 50L, TimeUnit.MILLISECONDS);
      }
    }
  }
  
  final void ˋ(Context paramContext, final c paramC)
  {
    if (paramC != null) {
      b.ˏ(3, "JSUpdateLooper", this, "addActiveTracker" + paramC.hashCode());
      
      if (!ॱ.containsKey(paramC)) {
        ॱ.put(paramC, "");
        paramC = paramContext;
        












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        paramContext = this; if ((ˏ == null) || (ˏ.isDone())) {
          b.ˏ(3, "JSUpdateLooper", paramContext, "Starting view update loop");
          paramC = new Runnable()
          {
            public final void run()
            {
              try
              {
                Intent localIntent = new Intent("UPDATE_VIEW_INFO");
                LocalBroadcastManager.getInstance(paramC.getApplicationContext()).sendBroadcast(localIntent);
                if (h.ˊ(h.this).isEmpty()) {
                  b.ˏ(3, "JSUpdateLooper", h.this, "No more active trackers");
                  h.ˏ(h.this).cancel(true);
                }
                return;
              } catch (Exception localException) { o.ॱ(
                  localException;













































































































































































































































































































































              }
              












































































































































































































































































































































            }
            













































































































































































































































































































































          }; Context tmp99_98 = paramContext;9998ˏ = 9998ˊ.scheduleWithFixedDelay(paramC, 0L, 
            ˋॱ, TimeUnit.MILLISECONDS);
        }
      }
    }
  }
}
